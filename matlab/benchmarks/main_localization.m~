%% Description
% 2D robot localization with wheel odometry and GPS measurements.
% 
% Three UKF are compared, defined as:
% 1- The state is embedding in SE(2) with a left invariant error, i.e.
%     - the function phi is the SE(2) exponnential, where state is 
%     multiplied on the left
%     - the function phi^{-1} is the SE(2) logarithm
% 2- The state is embedding in SE(2) with a right invariant error, i.e.
%     - the function phi is the SE(2) exponnential, where state is 
%     multiplied on the right
%     - the function phi^{-1} is the SE(2) logarithm
% 3- The state is embedding in R^3, i.e.
%     - the function phi is the standard vector addition
%     - the function phi^{-1} is the standard vector substraction


%% Matlab Initialization
clear all;
close all;
addpath ../ukf;
addpath ../geometry;
addpath ../example/localization;

%% Simulation Parameters
% Monte-Carlo run
N_mc = 40;
% sequence time
T = 100; 
% odometry frequency (Hz)
odo_freq = 10; 
% odometry noise on speed (v/m) ang angular speed (rad/s) measurements
odo_noise_std = [0.5; 4/180*pi];
% GPS frequency (Hz)
gps_freq = 1;
% GPS standard deviation (m)
gps_noise_std = 2;

%% Filter parameters
% Pameters are the same for each compared filter
% propagation noise matrix
ukf_left_Q = diag(odo_noise_std.^2);
ukf_right_Q = diag(odo_noise_std.^2);
ukf_std_Q = diag(odo_noise_std.^2);
% measurement noise matrix
ukf_left_R = gps_noise_std^2 * eye(2);
ukf_right_R = gps_noise_std^2 * eye(2);
ukf_R = gps_noise_std^2 * eye(2);
% initial error matrix
ukf_left_P0 = zeros(3, 3);
ukf_right_P0 = zeros(3, 3);
ukf_P0 = zeros(3, 3);
% sigma point parameter
ukf_left_alpha = 1e-0;
ukf_right_alpha = 1e-0;
ukf_alpha = 1e-0;

ukf_left_f = @localization_f;
ukf_right_f = @localization_f;
ukf_f = @localization_f;
ukf_left_h = @localization_h;
ukf_right_h = @localization_h;
ukf_h = @localization_h;
ukf_left_phi = @localization_right_phi;
ukf_right_phi = @localization_right_phi;
ukf_phi = @localization_phi;
ukf_left_phi_inv = @localization_left_phi_inv;
ukf_right_phi_inv = @localization_right_phi_inv;
ukf_phi_inv = @localization_phi_inv;
ukf_left_weights = ukf_set_weight(length(ukf_left_P0), length(ukf_left_R), ukf_left_alpha);
ukf_right_weights = ukf_set_weight(length(ukf_right_P0), length(ukf_right_R), ukf_right_alpha);
ukf_weights = ukf_set_weight(length(ukf_P0), length(ukf_R), ukf_alpha);
ukf_left_cholQ = chol(ukf_left_Q);
ukf_right_cholQ = chol(ukf_right_Q);
ukf_cholQ = chol(ukf_Q);

%% Simulation Initialization
% total number of timestamps
N = T*odo_freq;
dt = 1/odo_freq;

for k = 1:N_mc
    %% Simulation
    % simulation true trajectory
    [chi, omega] = localization_simu_f(T, odo_freq, odo_noise_std);
    % simulate measurement
    [y, n_update] = localization_simu_h(chi, T, odo_freq, ...
        gps_freq, gps_noise_std);


    %% Filter Initialization
    % initialize with true state
    ukf_left_chi = chi(1);
    ukf_right_chi = chi(1);
    ukf_chi = chi(1);
    ukf_left_P = ukf_left_P0;
    ukf_right_P = ukf_right_P0;
    ukf_P = ukf_P0;

    % variables for recording estimates
    ukf_left_chi_mat = ukf_left_chi;
    ukf_right_chi_mat = ukf_right_chi;
    ukf_chi_mat = ukf_chi;
    ukf_left_Ps = zeros(N, length(ukf_left_P), length(ukf_left_P));
    ukf_right_Ps = zeros(N, length(ukf_right_P), length(ukf_right_P));
    ukf_Ps = zeros(N, length(ukf_P), length(ukf_P));
    ukf_left_Ps(1, :, :) = ukf_P_left;
    ukf_right_Ps(1, :, :) = ukf_right_P;
    ukf_Ps(1, :, :) = ukf_P;
    n_y = 1;

    %% Filtering
    for n = 2:N
        % propagation
        [ukf_left_chi, ukf_left_P] = ukf_propagation(ukf_left_chi, ukf_left_P, omega(n-1), ...
            ukf_left_f, dt, ukf_left_phi, ukf_left_phi_inv, ukf_left_cholQ, ukf_left_weights.propagation);
        [ukf_right_chi, ukf_right_P] = ukf_propagation(ukf_right_chi, ukf_right_P, omega(n-1), ...
            ukf_right_f, dt, ukf_right_phi, ukf_right_phi_inv, ukf_right_cholQ, ukf_right_weights.propagation);
        [ukf_chi, ukf_P] = ukf_propagation(ukf_chi, ukf_P, omega(n-1), ...
            ukf_f, dt, ukf_phi, ukf_phi_inv, ukf_cholQ, ukf_weights.propagation);
        % update only if a measurement is received
        if n_update(n) == 1
           [ukf_left_chi, ukf_left_P] = ukf_update(ukf_left_chi, ukf_left_P, y(:, n_y), ukf_left_h, ...
               ukf_left_phi, ukf_left_R, ukf_left_weights.update);
           [ukf_chi, ukf_P] = ukf_update(ukf_chi, ukf_P, y(:, n_y), ukf_h, ...
               ukf_phi, ukf_R, ukf_weights.update);
           [ukf_chi, ukf_P] = ukf_update(ukf_chi, ukf_P, y(:, n_y), ukf_h, ...
               ukf_phi, ukf_R, ukf_weights.update);
            n_y = n_y + 1;
        end
        % save estimates
        ukf_left_chi_mat(n) = ukf_left_chi;
        ukf_chi_mat(n) = ukf_chi;
        ukf_chi_mat(n) = ukf_chi;
        ukf_left_Ps(n, :, :) = ukf_left_P;
        ukf_Ps(n, :, :) = ukf_P;
        ukf_Ps(n, :, :) = ukf_P;
    end
    % record errors
end

%% Results

% display error
localization_results_error(ukf_chi_mat, ukf_Ps, chi, omega, dt, y)